let refreshPromise = null;

axios.interceptors.response.use(
	(response) => response,
	async (error) => {
		const originalRequest = error.config;
		if (error.response?.status === 401 && !originalRequest._retry) {
			originalRequest._retry = true;

			try {
				// If a refresh is already in progress, wait for it to complete
				if (refreshPromise) {
					await refreshPromise;
					return axios(originalRequest);
				}

				// Start a new refresh process
				refreshPromise = useUserStore.getState().refreshToken();
				await refreshPromise;
				refreshPromise = null;

				return axios(originalRequest);
			} catch (refreshError) {
				// If refresh fails, redirect to login or handle as needed
				useUserStore.getState().logout();
				return Promise.reject(refreshError);
			}
		}
		return Promise.reject(error);
	}
);


How It Works Together
A request is made to a protected API endpoint.
If the token has expired, the server returns a 401 Unauthorized response.
The interceptor checks the 401 response:
If no refresh process is active, it starts one (refreshToken()).
If a refresh process is already running, it waits for it to complete.
Once the token is refreshed:
The interceptor retries the original failed request with the new token.
If the refresh fails:
The user is logged out, and the error is propagated.

